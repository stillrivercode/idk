name: AI PR Review

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches: [main, develop]

permissions:
  contents: read
  issues: write
  pull-requests: write

jobs:
  ai-pr-review:
    name: AI-Powered PR Review
    runs-on: ubuntu-latest
    if: >
      !contains(github.event.pull_request.title, '[skip ai]') &&
      !contains(github.event.pull_request.labels.*.name, 'skip-ai-review')

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Get PR changes
        id: pr_changes
        run: |
          # Get the diff for this PR
          git fetch origin main
          DIFF=$(git diff origin/main...HEAD --name-only | head -20)
          echo "files_changed<<EOF" >> $GITHUB_OUTPUT
          echo "$DIFF" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

          # Get the actual diff content (limited)
          DIFF_CONTENT=$(git diff origin/main...HEAD | head -500)
          echo "diff_content<<EOF" >> $GITHUB_OUTPUT
          echo "$DIFF_CONTENT" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Analyze PR with AI
        id: ai_analysis
        env:
          OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}
          AI_MODEL: ${{ vars.AI_MODEL || 'anthropic/claude-3.5-sonnet' }}
        run: |
          # Create AI analysis request
          cat > ai_request.json << 'EOF'
          {
            "model": "${{ env.AI_MODEL }}",
            "messages": [
              {
                "role": "system",
                "content": "You are an expert code reviewer specializing in the Information Dense Keywords Dictionary project. Review the provided PR changes and provide constructive feedback focusing on: 1) Dictionary content accuracy and clarity, 2) Documentation quality, 3) Consistency with existing patterns, 4) Security considerations, 5) Overall project goals alignment. Be concise but thorough."
              },
              {
                "role": "user",
                "content": "Please review this PR:\n\nTitle: ${{ github.event.pull_request.title }}\nDescription: ${{ github.event.pull_request.body }}\n\nFiles changed:\n${{ steps.pr_changes.outputs.files_changed }}\n\nDiff content:\n${{ steps.pr_changes.outputs.diff_content }}\n\nProvide a structured review with specific feedback and suggestions."
              }
            ],
            "max_tokens": 2000,
            "temperature": 0.3
          }
          EOF

          # Call OpenRouter API
          RESPONSE=$(curl -s -X POST "https://openrouter.ai/api/v1/chat/completions" \
            -H "Authorization: Bearer $OPENROUTER_API_KEY" \
            -H "Content-Type: application/json" \
            -d @ai_request.json)

          # Extract the review content
          REVIEW=$(echo "$RESPONSE" | jq -r '.choices[0].message.content // "AI review failed - check API key and model availability"')

          # Save review to output
          echo "review<<EOF" >> $GITHUB_OUTPUT
          echo "$REVIEW" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Check for existing AI review comment
        id: existing_comment
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Look for existing AI review comment
          COMMENT_ID=$(gh api repos/${{ github.repository }}/issues/${{ github.event.pull_request.number }}/comments \
            --jq '.[] | select(.body | startswith("## ü§ñ AI Code Review")) | .id' | head -1)
          echo "comment_id=$COMMENT_ID" >> $GITHUB_OUTPUT

      - name: Post or update AI review comment
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Format the review comment
          COMMENT_BODY="## ü§ñ AI Code Review

          ${{ steps.ai_analysis.outputs.review }}

          ---

          *This review was generated by AI using ${{ env.AI_MODEL }}. Please use your judgment when considering the feedback.*

          üí° **Tips:**
          - Add \`[skip ai]\` to PR title to skip AI review
          - Add \`skip-ai-review\` label to disable for this PR
          - Review suggestions are advisory, not blocking"

          if [ -n "${{ steps.existing_comment.outputs.comment_id }}" ]; then
            # Update existing comment
            gh api repos/${{ github.repository }}/issues/comments/${{ steps.existing_comment.outputs.comment_id }} \
              --method PATCH \
              --field body="$COMMENT_BODY"
            echo "Updated existing AI review comment"
          else
            # Create new comment
            gh pr comment ${{ github.event.pull_request.number }} --body "$COMMENT_BODY"
            echo "Created new AI review comment"
          fi

      - name: Add review labels
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Add label to indicate AI review completed
          gh pr edit ${{ github.event.pull_request.number }} --add-label "ai-reviewed"

          # Check if review suggests changes and add appropriate label
          if echo "${{ steps.ai_analysis.outputs.review }}" | grep -qi "issue\|concern\|problem\|fix\|improve"; then
            gh pr edit ${{ github.event.pull_request.number }} --add-label "needs-changes"
          fi

      - name: Handle API failures
        if: failure()
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Post failure notice
          gh pr comment ${{ github.event.pull_request.number }} --body \
            "## ‚ö†Ô∏è AI Review Failed

            The automated AI review could not be completed. This might be due to:
            - API key issues
            - Model availability
            - Network connectivity

            Please proceed with manual review or contact maintainers if this persists."
